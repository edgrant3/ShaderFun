Q1)
In the OpenGL Shading Language (GLSL), what is a uniform variable? What is an "in" variable? 
What is an "out" variable? How does a vertex shader pass data to a fragment shader?

A uniform variable is one that is shared identically between all shader instances. An "in" 
variable gets passed into the shader which performs operations using that variable and then 
outputs an "out" variable which will be passed to another place in the OpenGL pipeline 
(e.g. another shader). Thus, to pass data from vertex shader to fragment shader, we just 
create an output variable using the "out" keyword from the vertex shader, and list the variable
with the same name with the "in" keyword when it comes to the fragment shader.

Q2)
The SurfaceShader class has several member variables of type int, such as attrPos and unifModel. 
What do these variables represent? How are they given values in the first place?

    int attrPos; // A handle for the "in" vec4 representing vertex position in the vertex shader
    int attrNor; // A handle for the "in" vec4 representing vertex normal in the vertex shader
    int attrUV; // A handle for the "in" vec2 representing the UV coordinates in the vertex shader

    int unifModel; // A handle for the "uniform" mat4 representing model matrix in the vertex shader
    int unifModelInvTr; // A handle for the "uniform" mat4 representing inverse transpose of the model matrix in the vertex shader
    int unifView; // A handle for the "uniform" mat4 representing the view matrix in the vertex shader
    int unifProj; // A handle for the "uniform" mat4 representing the projection matrix in the vertex shader

these variables serve as handles for "in" and "uniform" variables which will be sent to the GPU.
They are declared in this class but not defined outright, because of the virtual function definitions 
which enable these variables to be defined as needed by a particular shader derived class. We create 
these handles on the CPU side to serve as unique IDs for tracking the GPU-side variables because we 
cannot directly access GPU memory. So the GPU will create an instance of the variable and store the 
CPU-side variable as the ID for it.