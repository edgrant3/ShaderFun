#version 150

in vec2 fs_UV;

out vec3 color;

uniform sampler2D u_RenderedTexture;
uniform int u_Time;
uniform ivec2 u_Dimensions;

const float kernel[121] = float[121](
0.006849, 0.007239, 0.007559, 0.007795, 0.007941, 0.00799, 0.007941, 0.007795, 0.007559, 0.007239, 0.006849,
0.007239, 0.007653, 0.00799, 0.00824, 0.008394, 0.008446, 0.008394, 0.00824, 0.00799, 0.007653, 0.007239,
0.007559, 0.00799, 0.008342, 0.008604, 0.008764, 0.008819, 0.008764, 0.008604, 0.008342, 0.00799, 0.007559,
0.007795, 0.00824, 0.008604, 0.008873, 0.009039, 0.009095, 0.009039, 0.008873, 0.008604, 0.00824, 0.007795,
0.007941, 0.008394, 0.008764, 0.009039, 0.009208, 0.009265, 0.009208, 0.009039, 0.008764, 0.008394, 0.007941,
0.00799, 0.008446, 0.008819, 0.009095, 0.009265, 0.009322, 0.009265, 0.009095, 0.008819, 0.008446, 0.00799,
0.007941, 0.008394, 0.008764, 0.009039, 0.009208, 0.009265, 0.009208, 0.009039, 0.008764, 0.008394, 0.007941,
0.007795, 0.00824, 0.008604, 0.008873, 0.009039, 0.009095, 0.009039, 0.008873, 0.008604, 0.00824, 0.007795,
0.007559, 0.00799, 0.008342, 0.008604, 0.008764, 0.008819, 0.008764, 0.008604, 0.008342, 0.00799, 0.007559,
0.007239, 0.007653, 0.00799, 0.00824, 0.008394, 0.008446, 0.008394, 0.00824, 0.00799, 0.007653, 0.007239,
0.006849, 0.007239, 0.007559, 0.007795, 0.007941, 0.00799, 0.007941, 0.007795, 0.007559, 0.007239, 0.006849
);

void main()
{

    // TODO Homework 5

    vec4 target_px = texelFetch(u_RenderedTexture, ivec2(gl_FragCoord.x, gl_FragCoord.y), 0);

    float sum  = 0;
    for (int j = 0; j < 11; j++)
    {
        for (int i = 0; i < 11; i++)
        {
            vec4 neighbor_col = texelFetch(u_RenderedTexture, ivec2(clamp(gl_FragCoord.x + i - 5, 0, u_Dimensions.x - 1), clamp(gl_FragCoord.y + j - 5, 0, u_Dimensions.y - 1)), 0);
            float gray = 0.21 * neighbor_col.r + 0.72 * neighbor_col.g + 0.07 * neighbor_col.b;
            if (gray > 0.525)
            {
                if (i != 5 && j != 5)
                {
                    float k = kernel[i + 11 * j];
                    target_px += k * neighbor_col;
                }

            }
        }
    }
    color = target_px.rgb;
}
